// Code generated by terragen. DO NOT EDIT.

package connectors

import (
	"strings"

	"github.com/descope/terraform-provider-descope/internal/models/helpers"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/listattr"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/objattr"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/stringattr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

var ConnectorsValidator = objattr.NewValidator[ConnectorsModel]("must have unique connector names")

var ConnectorsModifier = objattr.NewModifier[ConnectorsModel]("maintains connector identifiers between plan changes")

var ConnectorsAttributes = map[string]schema.Attribute{
    {{- range .Connectors }}
	"{{.AttributeName}}":     listattr.Default[{{.StructName}}Model]({{.StructName}}Attributes{{ if .HasValidator }}, {{.StructName}}Validator{{ end }}),
    {{- end }}
}

type ConnectorsModel struct {
    {{- range .Connectors }}
	{{.StructName}}     listattr.Type[{{.StructName}}Model]     `tfsdk:"{{.AttributeName}}"`
    {{- end }}
}

func (m *ConnectorsModel) Values(h *helpers.Handler) map[string]any {
	data := map[string]any{}
    {{- range .Connectors }}
	listattr.Get(m.{{.StructName}}, data, "{{.DataName}}", h)
    {{- end }}
	return data
}

func (m *ConnectorsModel) SetValues(h *helpers.Handler, data map[string]any) {
    {{- range .Connectors }}
	listattr.SetMatching(&m.{{.StructName}}, data, "{{.DataName}}", h)
    {{- end }}
}

func (m *ConnectorsModel) CollectReferences(h *helpers.Handler) {
    {{- range .Connectors }}
	addConnectorReferences(h, "{{.DataName}}", m.{{.StructName}})
    {{- end }}
}

func (m *ConnectorsModel) Validate(h *helpers.Handler) {
	names := map[string]int{}
    {{- range .Connectors }}
	addConnectorNames(h, names, m.{{.StructName}})
    {{- end }}
	for k, v := range names {
		if v > 1 {
			h.Error("Connector names must be unique", "The connector name '%s' is used %d times", k, v)
		}
	}
}

func (m *ConnectorsModel) Modify(h *helpers.Handler, state *ConnectorsModel) {
    {{- range .Connectors }}
    listattr.ModifyMatching(h, &m.{{.StructName}}, state.{{.StructName}})
    {{- end }}

	// Upgrade existing identifiers for SMTP connectors to support static IPs
	for c := range listattr.MutatingIterator(&m.SMTP, h) {
		id := c.ID.ValueString()
		if v := strings.TrimPrefix(id, "MP"); v != id && c.UseStaticIPs.ValueBool() {
			c.ID = stringattr.Value("CI" + v)
			h.Log("Upgrading identifier for SMTP connector from '%s' to '%s'", id, c.ID.ValueString())
		}
	}
}
