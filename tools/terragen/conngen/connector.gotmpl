// Code generated by terragen. DO NOT EDIT.

package connectors

import (
	"github.com/descope/terraform-provider-descope/internal/models/helpers"
    {{- if .HasField "boolean" }}
	"github.com/descope/terraform-provider-descope/internal/models/attrs/boolattr"
    {{- end }}
    {{- if .HasField "number" }}
	"github.com/descope/terraform-provider-descope/internal/models/attrs/floatattr"
    {{- end }}
    {{- if .HasField "auditFilters" }}
	"github.com/descope/terraform-provider-descope/internal/models/attrs/listattr"
    {{- end }}
    {{- if or .HasValidator (.HasField "httpAuth") }}
	"github.com/descope/terraform-provider-descope/internal/models/attrs/objattr"
    {{- end }}
	"github.com/descope/terraform-provider-descope/internal/models/attrs/stringattr"
    {{- if .HasField "object" }}
	"github.com/descope/terraform-provider-descope/internal/models/attrs/strmapattr"
    {{- end }}
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

{{ if .HasValidator }}
var {{.StructName}}Validator = objattr.NewValidator[{{.StructName}}Model]("must have a valid configuration")
{{ end }}

var {{.StructName}}Attributes = map[string]schema.Attribute{
	"id":          stringattr.IdentifierMatched(),
	"name":        stringattr.Required(stringattr.StandardLenValidator),
	"description": stringattr.Default(""),

    {{ range .Fields }}
    "{{.AttributeName}}": {{.AttributeType}},
    {{- end }}
}

// Model

type {{.StructName}}Model struct {
	ID          stringattr.Type `tfsdk:"id"`
	Name        stringattr.Type `tfsdk:"name"`
	Description stringattr.Type `tfsdk:"description"`

    {{ range .Fields }}
    {{.StructName}} {{.StructType}} `tfsdk:"{{.AttributeName}}"`
    {{- end }}
}

func (m *{{.StructName}}Model) Values(h *helpers.Handler) map[string]any {
	data := connectorValues(m.ID, m.Name, m.Description, h)
	data["type"] = "{{.ID}}"
	data["configuration"] = m.ConfigurationValues(h)
	return data
}

func (m *{{.StructName}}Model) SetValues(h *helpers.Handler, data map[string]any) {
	setConnectorValues(&m.ID, &m.Name, &m.Description, data, h)
	{{- if gt (len .Fields) 0 }}
	if c, ok := data["configuration"].(map[string]any); ok {
		m.SetConfigurationValues(c, h)
	}	
	{{- end }}
}

{{ if .HasValidator }}
func (m *{{.StructName}}Model) Validate(h *helpers.Handler) {
    {{- range .Fields }}{{ if .Dependency }}
	{{- if eq .Dependency.Field.Type "boolean" }}
	{{- if .Dependency.DefaultValue }}
	if !m.{{ .StructName }}.IsNull() && !m.{{ .Dependency.Field.StructName }}.IsNull() && !m.{{ .Dependency.Field.StructName }}.ValueBool() {
		h.Conflict("The {{.AttributeName}} field cannot be used when {{ .Dependency.Field.AttributeName }} isn't set to true")
	}
	{{- else }}
	if !m.{{ .StructName }}.IsNull() && !m.{{ .Dependency.Field.StructName }}.ValueBool() {
		h.Conflict("The {{.AttributeName}} field cannot be used unless {{ .Dependency.Field.AttributeName }} is set to true")
	}
	{{- end }}
	{{- end }}
	{{- if eq .Dependency.Field.Type "string" }}
	if m.{{ .StructName }}.ValueString() != "" && m.{{ .Dependency.Field.StructName }}.ValueString() != "" && m.{{ .Dependency.Field.StructName }}.ValueString() != "{{ .Dependency.Value }}" {
		h.Conflict("The {{.AttributeName}} field can only be used when {{ .Dependency.Field.AttributeName }} is set to '{{ .Dependency.Value }}'")
	}
	if m.{{ .StructName }}.ValueString() == "" && !m.{{ .StructName }}.IsUnknown() && m.{{ .Dependency.Field.StructName }}.ValueString() == "{{ .Dependency.Value }}" {
		h.Conflict("The {{.AttributeName}} field is required when {{ .Dependency.Field.AttributeName }} is set to '{{ .Dependency.Value }}'")
	}
	{{- end }}
	{{- end }}{{ end }}
}
{{ end }}

// Configuration

func (m *{{.StructName}}Model) ConfigurationValues(h *helpers.Handler) map[string]any {
	c := map[string]any{}
    {{- range .Fields }}
    {{.GetValueStatement}}
    {{- end }}
	return c
}

{{ if gt (len .Fields) 0 }}
func (m *{{.StructName}}Model) SetConfigurationValues(c map[string]any, h *helpers.Handler) {
    {{- range .Fields }}
    {{.SetValueStatement}}
    {{- end }}
}
{{- end }}

// Matching

func (m *{{.StructName}}Model) GetName() stringattr.Type {
	return m.Name
}

func (m *{{.StructName}}Model) GetID() stringattr.Type {
	return m.ID
}

func (m *{{.StructName}}Model) SetID(id stringattr.Type) {
	m.ID = id
}
