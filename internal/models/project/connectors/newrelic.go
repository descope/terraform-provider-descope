// Code generated by terragen. DO NOT EDIT.

package connectors

import (
	"github.com/descope/terraform-provider-descope/internal/models/attrs/boolattr"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/listattr"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/objattr"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/stringattr"
	"github.com/descope/terraform-provider-descope/internal/models/helpers"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

var NewRelicValidator = objattr.NewValidator[NewRelicModel]("must have a valid configuration")

var NewRelicAttributes = map[string]schema.Attribute{
	"id":          stringattr.IdentifierMatched(),
	"name":        stringattr.Required(stringattr.StandardLenValidator),
	"description": stringattr.Default(""),

	"api_key":                  stringattr.SecretRequired(),
	"data_center":              stringattr.Default(""),
	"audit_enabled":            boolattr.Default(true),
	"audit_filters":            listattr.Default[AuditFilterFieldModel](AuditFilterFieldAttributes),
	"troubleshoot_log_enabled": boolattr.Default(false),
	"override_logs_prefix":     boolattr.Default(false),
	"logs_prefix":              stringattr.Default("descope."),
}

// Model

type NewRelicModel struct {
	ID          stringattr.Type `tfsdk:"id"`
	Name        stringattr.Type `tfsdk:"name"`
	Description stringattr.Type `tfsdk:"description"`

	APIKey                 stringattr.Type                      `tfsdk:"api_key"`
	DataCenter             stringattr.Type                      `tfsdk:"data_center"`
	AuditEnabled           boolattr.Type                        `tfsdk:"audit_enabled"`
	AuditFilters           listattr.Type[AuditFilterFieldModel] `tfsdk:"audit_filters"`
	TroubleshootLogEnabled boolattr.Type                        `tfsdk:"troubleshoot_log_enabled"`
	OverrideLogsPrefix     boolattr.Type                        `tfsdk:"override_logs_prefix"`
	LogsPrefix             stringattr.Type                      `tfsdk:"logs_prefix"`
}

func (m *NewRelicModel) Values(h *helpers.Handler) map[string]any {
	data := connectorValues(m.ID, m.Name, m.Description, h)
	data["type"] = "newrelic"
	data["configuration"] = m.ConfigurationValues(h)
	return data
}

func (m *NewRelicModel) SetValues(h *helpers.Handler, data map[string]any) {
	setConnectorValues(&m.ID, &m.Name, &m.Description, data, h)
	if c, ok := data["configuration"].(map[string]any); ok {
		m.SetConfigurationValues(c, h)
	}
}

func (m *NewRelicModel) Validate(h *helpers.Handler) {
	if !m.AuditFilters.IsNull() && !m.AuditEnabled.IsNull() && !m.AuditEnabled.ValueBool() {
		h.Error("Invalid connector configuration", "The audit_filters field cannot be used when audit_enabled is set to false")
	}
	if !m.LogsPrefix.IsNull() && !m.OverrideLogsPrefix.ValueBool() {
		h.Error("Invalid connector configuration", "The logs_prefix field cannot be used unless override_logs_prefix is set to true")
	}
}

// Configuration

func (m *NewRelicModel) ConfigurationValues(h *helpers.Handler) map[string]any {
	c := map[string]any{}
	stringattr.Get(m.APIKey, c, "apiKey")
	stringattr.Get(m.DataCenter, c, "dataCenter")
	boolattr.Get(m.AuditEnabled, c, "auditEnabled")
	listattr.Get(m.AuditFilters, c, "auditFilters", h)
	boolattr.Get(m.TroubleshootLogEnabled, c, "troubleshootLogEnabled")
	boolattr.Get(m.OverrideLogsPrefix, c, "overrideLogsPrefix")
	stringattr.Get(m.LogsPrefix, c, "logsPrefix")
	return c
}

func (m *NewRelicModel) SetConfigurationValues(c map[string]any, h *helpers.Handler) {
	stringattr.Nil(&m.APIKey)
	stringattr.Set(&m.DataCenter, c, "dataCenter")
	boolattr.Set(&m.AuditEnabled, c, "auditEnabled")
	listattr.Set(&m.AuditFilters, c, "auditFilters", h)
	boolattr.Set(&m.TroubleshootLogEnabled, c, "troubleshootLogEnabled")
	boolattr.Set(&m.OverrideLogsPrefix, c, "overrideLogsPrefix")
	stringattr.Set(&m.LogsPrefix, c, "logsPrefix")
}

// Matching

func (m *NewRelicModel) GetName() stringattr.Type {
	return m.Name
}

func (m *NewRelicModel) GetID() stringattr.Type {
	return m.ID
}

func (m *NewRelicModel) SetID(id stringattr.Type) {
	m.ID = id
}
