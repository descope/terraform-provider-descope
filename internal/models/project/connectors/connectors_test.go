// Code generated by terragen. DO NOT EDIT.

package connectors_test

import (
	"regexp"
	"testing"

	"github.com/descope/terraform-provider-descope/tools/testacc"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestConnectors(t *testing.T) {
	p := testacc.Project(t)
	testacc.Run(t,
		resource.TestStep{
			Config: p.Config(),
			Check: p.Check(map[string]any{
				"connectors.%": 51,
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"abuseipdb": [
						{
							name = "Test abuseipdb Connector"
							description = "A description for the abuseipdb connector"
    						api_key = "mhvece"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.abuseipdb.#": 1,
				"connectors.abuseipdb.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test abuseipdb Connector",
					"description": "A description for the abuseipdb connector",
					"api_key":     "mhvece",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"amplitude": [
						{
							name = "Test amplitude Connector"
							description = "A description for the amplitude connector"
    						api_key = "mhvece"
    						server_url = "wluvduhqc"
    						server_zone = "lr32nx7xfo"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.amplitude.#": 1,
				"connectors.amplitude.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test amplitude Connector",
					"description": "A description for the amplitude connector",
					"api_key":     "mhvece",
					"server_url":  "wluvduhqc",
					"server_zone": "lr32nx7xfo",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"audit_webhook": [
						{
							name = "Test audit-webhook Connector"
							description = "A description for the audit-webhook connector"
    						base_url = "bceszn6"
    						authentication = {
    							bearer_token = "xhmqmkcfhe4mk6"
    						}
    						headers = {
    							"key" = "g6htpmp"
    						}
    						hmac_secret = "ooxzct5yxz"
    						insecure = true
    						audit_filters = [{ key = "actions", operator = "includes", values = ["kekpon4oj34w"] }]
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.audit_webhook.#": 1,
				"connectors.audit_webhook.0": map[string]any{
					"id":                          testacc.AttributeHasPrefix("CI"),
					"name":                        "Test audit-webhook Connector",
					"description":                 "A description for the audit-webhook connector",
					"base_url":                    "bceszn6",
					"authentication.bearer_token": "xhmqmkcfhe4mk6",
					"headers.key":                 "g6htpmp",
					"hmac_secret":                 "ooxzct5yxz",
					"insecure":                    true,
					"audit_filters.0.values":      []string{"kekpon4oj34w"},
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"aws_s3": [
						{
							name = "Test aws-s3 Connector"
							description = "A description for the aws-s3 connector"
    						auth_type = "credentials"
    						access_key_id = "ezzrllbqu22"
    						secret_access_key = "xiyuadzk4w64hog"
    						role_arn = ""
    						external_id = ""
    						region = "y2l5fg"
    						bucket = "ywdzxd"
    						audit_enabled = true
    						audit_filters = [{ key = "actions", operator = "includes", values = ["kekpon4oj34w"] }]
    						troubleshoot_log_enabled = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.aws_s3.#": 1,
				"connectors.aws_s3.0": map[string]any{
					"id":                       testacc.AttributeHasPrefix("CI"),
					"name":                     "Test aws-s3 Connector",
					"description":              "A description for the aws-s3 connector",
					"auth_type":                "credentials",
					"access_key_id":            "ezzrllbqu22",
					"secret_access_key":        "xiyuadzk4w64hog",
					"role_arn":                 "",
					"external_id":              "",
					"region":                   "y2l5fg",
					"bucket":                   "ywdzxd",
					"audit_enabled":            true,
					"audit_filters.0.values":   []string{"kekpon4oj34w"},
					"troubleshoot_log_enabled": true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"aws_translate": [
						{
							name = "Test aws-translate Connector"
							description = "A description for the aws-translate connector"
    						access_key_id = "ezzrllbqu22"
    						secret_access_key = "xiyuadzk4w64hog"
    						session_token = "wnx4upgg3mft"
    						region = "us-east-1"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.aws_translate.#": 1,
				"connectors.aws_translate.0": map[string]any{
					"id":                testacc.AttributeHasPrefix("CI"),
					"name":              "Test aws-translate Connector",
					"description":       "A description for the aws-translate connector",
					"access_key_id":     "ezzrllbqu22",
					"secret_access_key": "xiyuadzk4w64hog",
					"session_token":     "wnx4upgg3mft",
					"region":            "us-east-1",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"clear": [
						{
							name = "Test clear Connector"
							description = "A description for the clear connector"
    						project_id = "yhw7b6yel"
    						api_key = "mhvece"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.clear.#": 1,
				"connectors.clear.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test clear Connector",
					"description": "A description for the clear connector",
					"project_id":  "yhw7b6yel",
					"api_key":     "mhvece",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"cybersixgill": [
						{
							name = "Test cybersixgill Connector"
							description = "A description for the cybersixgill connector"
    						client_id = "sgetgyvq"
    						client_secret = "tjpxl7uy4wbb"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.cybersixgill.#": 1,
				"connectors.cybersixgill.0": map[string]any{
					"id":            testacc.AttributeHasPrefix("CI"),
					"name":          "Test cybersixgill Connector",
					"description":   "A description for the cybersixgill connector",
					"client_id":     "sgetgyvq",
					"client_secret": "tjpxl7uy4wbb",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"datadog": [
						{
							name = "Test datadog Connector"
							description = "A description for the datadog connector"
    						api_key = "mhvece"
    						site = "7oxa"
    						audit_enabled = true
    						audit_filters = [{ key = "actions", operator = "includes", values = ["kekpon4oj34w"] }]
    						troubleshoot_log_enabled = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.datadog.#": 1,
				"connectors.datadog.0": map[string]any{
					"id":                       testacc.AttributeHasPrefix("CI"),
					"name":                     "Test datadog Connector",
					"description":              "A description for the datadog connector",
					"api_key":                  "mhvece",
					"site":                     "7oxa",
					"audit_enabled":            true,
					"audit_filters.0.values":   []string{"kekpon4oj34w"},
					"troubleshoot_log_enabled": true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"devrev_grow": [
						{
							name = "Test devrev-grow Connector"
							description = "A description for the devrev-grow connector"
    						api_key = "mhvece"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.devrev_grow.#": 1,
				"connectors.devrev_grow.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test devrev-grow Connector",
					"description": "A description for the devrev-grow connector",
					"api_key":     "mhvece",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"docebo": [
						{
							name = "Test docebo Connector"
							description = "A description for the docebo connector"
    						base_url = "bceszn6"
    						client_id = "sgetgyvq"
    						client_secret = "tjpxl7uy4wbb"
    						username = "c33yu7ld"
    						password = "l2eergg2"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.docebo.#": 1,
				"connectors.docebo.0": map[string]any{
					"id":            testacc.AttributeHasPrefix("CI"),
					"name":          "Test docebo Connector",
					"description":   "A description for the docebo connector",
					"base_url":      "bceszn6",
					"client_id":     "sgetgyvq",
					"client_secret": "tjpxl7uy4wbb",
					"username":      "c33yu7ld",
					"password":      "l2eergg2",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"eight_by_eight_viber": [
						{
							name = "Test eight-by-eight-viber Connector"
							description = "A description for the eight-by-eight-viber connector"
    						sub_account_id = "ncs2xh6vffuf"
    						api_key = "mhvece"
    						country = "v73e4t6"
    						use_static_ips = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.eight_by_eight_viber.#": 1,
				"connectors.eight_by_eight_viber.0": map[string]any{
					"id":             testacc.AttributeHasPrefix("CI"),
					"name":           "Test eight-by-eight-viber Connector",
					"description":    "A description for the eight-by-eight-viber connector",
					"sub_account_id": "ncs2xh6vffuf",
					"api_key":        "mhvece",
					"country":        "v73e4t6",
					"use_static_ips": true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"eight_by_eight_whatsapp": [
						{
							name = "Test eight-by-eight-whatsapp Connector"
							description = "A description for the eight-by-eight-whatsapp connector"
    						sub_account_id = "ncs2xh6vffuf"
    						api_key = "mhvece"
    						template_id = "si4ja3s6et"
    						country = "v73e4t6"
    						use_static_ips = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.eight_by_eight_whatsapp.#": 1,
				"connectors.eight_by_eight_whatsapp.0": map[string]any{
					"id":             testacc.AttributeHasPrefix("CI"),
					"name":           "Test eight-by-eight-whatsapp Connector",
					"description":    "A description for the eight-by-eight-whatsapp connector",
					"sub_account_id": "ncs2xh6vffuf",
					"api_key":        "mhvece",
					"template_id":    "si4ja3s6et",
					"country":        "v73e4t6",
					"use_static_ips": true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"elephant": [
						{
							name = "Test elephant Connector"
							description = "A description for the elephant connector"
    						access_key = "ytsxrz73h"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.elephant.#": 1,
				"connectors.elephant.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test elephant Connector",
					"description": "A description for the elephant connector",
					"access_key":  "ytsxrz73h",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"external_token_http": [
						{
							name = "Test external-token-http Connector"
							description = "A description for the external-token-http connector"
    						endpoint = "w27xxsgz"
    						authentication = {
    							bearer_token = "xhmqmkcfhe4mk6"
    						}
    						headers = {
    							"key" = "g6htpmp"
    						}
    						hmac_secret = "ooxzct5yxz"
    						insecure = true
    						use_static_ips = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.external_token_http.#": 1,
				"connectors.external_token_http.0": map[string]any{
					"id":                          testacc.AttributeHasPrefix("CI"),
					"name":                        "Test external-token-http Connector",
					"description":                 "A description for the external-token-http connector",
					"endpoint":                    "w27xxsgz",
					"authentication.bearer_token": "xhmqmkcfhe4mk6",
					"headers.key":                 "g6htpmp",
					"hmac_secret":                 "ooxzct5yxz",
					"insecure":                    true,
					"use_static_ips":              true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"fingerprint": [
						{
							name = "Test fingerprint Connector"
							description = "A description for the fingerprint connector"
    						public_api_key = "htt624yz4z6i"
    						secret_api_key = "qxt75gbg4234"
    						use_cloudflare_integration = true
    						cloudflare_script_url = "p5sop7bd2jskwpzwdm6"
    						cloudflare_endpoint_url = "ad7li7hhec3doqaf33abq"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.fingerprint.#": 1,
				"connectors.fingerprint.0": map[string]any{
					"id":                         testacc.AttributeHasPrefix("CI"),
					"name":                       "Test fingerprint Connector",
					"description":                "A description for the fingerprint connector",
					"public_api_key":             "htt624yz4z6i",
					"secret_api_key":             "qxt75gbg4234",
					"use_cloudflare_integration": true,
					"cloudflare_script_url":      "p5sop7bd2jskwpzwdm6",
					"cloudflare_endpoint_url":    "ad7li7hhec3doqaf33abq",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"fingerprint_descope": [
						{
							name = "Test fingerprint-descope Connector"
							description = "A description for the fingerprint-descope connector"
    						custom_domain = "chk55vpucvwg"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.fingerprint_descope.#": 1,
				"connectors.fingerprint_descope.0": map[string]any{
					"id":            testacc.AttributeHasPrefix("CI"),
					"name":          "Test fingerprint-descope Connector",
					"description":   "A description for the fingerprint-descope connector",
					"custom_domain": "chk55vpucvwg",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"firebase_admin": [
						{
							name = "Test firebase-admin Connector"
							description = "A description for the firebase-admin connector"
    						service_account = "w4nbeixmfpmumt"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.firebase_admin.#": 1,
				"connectors.firebase_admin.0": map[string]any{
					"id":              testacc.AttributeHasPrefix("CI"),
					"name":            "Test firebase-admin Connector",
					"description":     "A description for the firebase-admin connector",
					"service_account": "w4nbeixmfpmumt",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"forter": [
						{
							name = "Test forter Connector"
							description = "A description for the forter connector"
    						site_id = "raavxa"
    						secret_key = "wi4bhwt7a"
    						api_version = "ip524nzsyp"
    						overrides = true
    						override_ip_address = "urtsgzb7hjbuj5k3y"
    						override_user_email = "kqyebsfvqy6w6y6wn"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.forter.#": 1,
				"connectors.forter.0": map[string]any{
					"id":                  testacc.AttributeHasPrefix("CI"),
					"name":                "Test forter Connector",
					"description":         "A description for the forter connector",
					"site_id":             "raavxa",
					"secret_key":          "wi4bhwt7a",
					"api_version":         "ip524nzsyp",
					"overrides":           true,
					"override_ip_address": "urtsgzb7hjbuj5k3y",
					"override_user_email": "kqyebsfvqy6w6y6wn",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"generic_email_gateway": [
						{
							name = "Test generic-email-gateway Connector"
							description = "A description for the generic-email-gateway connector"
    						post_url = "efnv6ac"
    						sender = "bi3hxe"
    						authentication = {
    							bearer_token = "xhmqmkcfhe4mk6"
    						}
    						headers = {
    							"key" = "g6htpmp"
    						}
    						hmac_secret = "ooxzct5yxz"
    						insecure = true
    						use_static_ips = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.generic_email_gateway.#": 1,
				"connectors.generic_email_gateway.0": map[string]any{
					"id":                          testacc.AttributeHasPrefix("CI"),
					"name":                        "Test generic-email-gateway Connector",
					"description":                 "A description for the generic-email-gateway connector",
					"post_url":                    "efnv6ac",
					"sender":                      "bi3hxe",
					"authentication.bearer_token": "xhmqmkcfhe4mk6",
					"headers.key":                 "g6htpmp",
					"hmac_secret":                 "ooxzct5yxz",
					"insecure":                    true,
					"use_static_ips":              true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"generic_sms_gateway": [
						{
							name = "Test generic-sms-gateway Connector"
							description = "A description for the generic-sms-gateway connector"
    						post_url = "efnv6ac"
    						sender = "bi3hxe"
    						authentication = {
    							bearer_token = "xhmqmkcfhe4mk6"
    						}
    						headers = {
    							"key" = "g6htpmp"
    						}
    						hmac_secret = "ooxzct5yxz"
    						insecure = true
    						use_static_ips = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.generic_sms_gateway.#": 1,
				"connectors.generic_sms_gateway.0": map[string]any{
					"id":                          testacc.AttributeHasPrefix("CI"),
					"name":                        "Test generic-sms-gateway Connector",
					"description":                 "A description for the generic-sms-gateway connector",
					"post_url":                    "efnv6ac",
					"sender":                      "bi3hxe",
					"authentication.bearer_token": "xhmqmkcfhe4mk6",
					"headers.key":                 "g6htpmp",
					"hmac_secret":                 "ooxzct5yxz",
					"insecure":                    true,
					"use_static_ips":              true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"google_cloud_translation": [
						{
							name = "Test google-cloud-translation Connector"
							description = "A description for the google-cloud-translation connector"
    						project_id = "yhw7b6yel"
    						service_account_json = "4wrifr235ikphcluwt"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.google_cloud_translation.#": 1,
				"connectors.google_cloud_translation.0": map[string]any{
					"id":                   testacc.AttributeHasPrefix("CI"),
					"name":                 "Test google-cloud-translation Connector",
					"description":          "A description for the google-cloud-translation connector",
					"project_id":           "yhw7b6yel",
					"service_account_json": "4wrifr235ikphcluwt",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"google_maps_places": [
						{
							name = "Test google-maps-places Connector"
							description = "A description for the google-maps-places connector"
    						public_api_key = "htt624yz4z6i"
    						address_types = "ww5orzyeof5s"
    						language = "utxtas5e"
    						region = "y2l5fg"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.google_maps_places.#": 1,
				"connectors.google_maps_places.0": map[string]any{
					"id":             testacc.AttributeHasPrefix("CI"),
					"name":           "Test google-maps-places Connector",
					"description":    "A description for the google-maps-places connector",
					"public_api_key": "htt624yz4z6i",
					"address_types":  "ww5orzyeof5s",
					"language":       "utxtas5e",
					"region":         "y2l5fg",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"hibp": [
						{
							name = "Test hibp Connector"
							description = "A description for the hibp connector"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.hibp.#": 1,
				"connectors.hibp.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test hibp Connector",
					"description": "A description for the hibp connector",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"http": [
						{
							name = "Test http Connector"
							description = "A description for the http connector"
    						base_url = "bceszn6"
    						authentication = {
    							bearer_token = "xhmqmkcfhe4mk6"
    						}
    						headers = {
    							"key" = "g6htpmp"
    						}
    						hmac_secret = "ooxzct5yxz"
    						insecure = true
    						include_headers_in_context = true
    						use_static_ips = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.http.#": 1,
				"connectors.http.0": map[string]any{
					"id":                          testacc.AttributeHasPrefix("CI"),
					"name":                        "Test http Connector",
					"description":                 "A description for the http connector",
					"base_url":                    "bceszn6",
					"authentication.bearer_token": "xhmqmkcfhe4mk6",
					"headers.key":                 "g6htpmp",
					"hmac_secret":                 "ooxzct5yxz",
					"insecure":                    true,
					"include_headers_in_context":  true,
					"use_static_ips":              true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"hubspot": [
						{
							name = "Test hubspot Connector"
							description = "A description for the hubspot connector"
    						access_token = "ssrho3t3233"
    						base_url = "bceszn6"
    						use_static_ips = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.hubspot.#": 1,
				"connectors.hubspot.0": map[string]any{
					"id":             testacc.AttributeHasPrefix("CI"),
					"name":           "Test hubspot Connector",
					"description":    "A description for the hubspot connector",
					"access_token":   "ssrho3t3233",
					"base_url":       "bceszn6",
					"use_static_ips": true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"incode": [
						{
							name = "Test incode Connector"
							description = "A description for the incode connector"
    						api_key = "mhvece"
    						api_url = "dg2kp4"
    						flow_id = "xkg6re"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.incode.#": 1,
				"connectors.incode.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test incode Connector",
					"description": "A description for the incode connector",
					"api_key":     "mhvece",
					"api_url":     "dg2kp4",
					"flow_id":     "xkg6re",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"intercom": [
						{
							name = "Test intercom Connector"
							description = "A description for the intercom connector"
    						token = "hrdj5"
    						region = "US"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.intercom.#": 1,
				"connectors.intercom.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test intercom Connector",
					"description": "A description for the intercom connector",
					"token":       "hrdj5",
					"region":      "US",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"lokalise": [
						{
							name = "Test lokalise Connector"
							description = "A description for the lokalise connector"
    						api_token = "mybopddv"
    						project_id = "yhw7b6yel"
    						team_id = "ontsaz"
    						card_id = "uo4way"
    						translation_provider = "zdmwgn7cvt7zfpsmrww"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.lokalise.#": 1,
				"connectors.lokalise.0": map[string]any{
					"id":                   testacc.AttributeHasPrefix("CI"),
					"name":                 "Test lokalise Connector",
					"description":          "A description for the lokalise connector",
					"api_token":            "mybopddv",
					"project_id":           "yhw7b6yel",
					"team_id":              "ontsaz",
					"card_id":              "uo4way",
					"translation_provider": "zdmwgn7cvt7zfpsmrww",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"mparticle": [
						{
							name = "Test mparticle Connector"
							description = "A description for the mparticle connector"
    						api_key = "mhvece"
    						api_secret = "hgg666mus"
    						base_url = "bceszn6"
    						default_environment = "mekqliza6drwrn7azt"
    						use_static_ips = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.mparticle.#": 1,
				"connectors.mparticle.0": map[string]any{
					"id":                  testacc.AttributeHasPrefix("CI"),
					"name":                "Test mparticle Connector",
					"description":         "A description for the mparticle connector",
					"api_key":             "mhvece",
					"api_secret":          "hgg666mus",
					"base_url":            "bceszn6",
					"default_environment": "mekqliza6drwrn7azt",
					"use_static_ips":      true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"newrelic": [
						{
							name = "Test newrelic Connector"
							description = "A description for the newrelic connector"
    						api_key = "mhvece"
    						data_center = "wjih4vgzrt"
    						audit_enabled = true
    						audit_filters = [{ key = "actions", operator = "includes", values = ["kekpon4oj34w"] }]
    						troubleshoot_log_enabled = true
    						override_logs_prefix = true
    						logs_prefix = "descope."
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.newrelic.#": 1,
				"connectors.newrelic.0": map[string]any{
					"id":                       testacc.AttributeHasPrefix("CI"),
					"name":                     "Test newrelic Connector",
					"description":              "A description for the newrelic connector",
					"api_key":                  "mhvece",
					"data_center":              "wjih4vgzrt",
					"audit_enabled":            true,
					"audit_filters.0.values":   []string{"kekpon4oj34w"},
					"troubleshoot_log_enabled": true,
					"override_logs_prefix":     true,
					"logs_prefix":              "descope.",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"radar": [
						{
							name = "Test radar Connector"
							description = "A description for the radar connector"
    						public_api_key = "htt624yz4z6i"
    						address_types = "ww5orzyeof5s"
    						language = "utxtas5e"
    						region = "y2l5fg"
    						limit = 5
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.radar.#": 1,
				"connectors.radar.0": map[string]any{
					"id":             testacc.AttributeHasPrefix("CI"),
					"name":           "Test radar Connector",
					"description":    "A description for the radar connector",
					"public_api_key": "htt624yz4z6i",
					"address_types":  "ww5orzyeof5s",
					"language":       "utxtas5e",
					"region":         "y2l5fg",
					"limit":          5,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"recaptcha": [
						{
							name = "Test recaptcha Connector"
							description = "A description for the recaptcha connector"
    						site_key = "ikzbbly"
    						secret_key = "wi4bhwt7a"
    						override_assessment = true
    						assessment_score = 15
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.recaptcha.#": 1,
				"connectors.recaptcha.0": map[string]any{
					"id":                  testacc.AttributeHasPrefix("CI"),
					"name":                "Test recaptcha Connector",
					"description":         "A description for the recaptcha connector",
					"site_key":            "ikzbbly",
					"secret_key":          "wi4bhwt7a",
					"override_assessment": true,
					"assessment_score":    15,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"recaptcha_enterprise": [
						{
							name = "Test recaptcha-enterprise Connector"
							description = "A description for the recaptcha-enterprise connector"
    						project_id = "yhw7b6yel"
    						site_key = "ikzbbly"
    						api_key = "mhvece"
    						override_assessment = true
    						assessment_score = 15
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.recaptcha_enterprise.#": 1,
				"connectors.recaptcha_enterprise.0": map[string]any{
					"id":                  testacc.AttributeHasPrefix("CI"),
					"name":                "Test recaptcha-enterprise Connector",
					"description":         "A description for the recaptcha-enterprise connector",
					"project_id":          "yhw7b6yel",
					"site_key":            "ikzbbly",
					"api_key":             "mhvece",
					"override_assessment": true,
					"assessment_score":    15,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"rekognition": [
						{
							name = "Test rekognition Connector"
							description = "A description for the rekognition connector"
    						access_key_id = "ezzrllbqu22"
    						secret_access_key = "xiyuadzk4w64hog"
    						collection_id = "descope-collection"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.rekognition.#": 1,
				"connectors.rekognition.0": map[string]any{
					"id":                testacc.AttributeHasPrefix("CI"),
					"name":              "Test rekognition Connector",
					"description":       "A description for the rekognition connector",
					"access_key_id":     "ezzrllbqu22",
					"secret_access_key": "xiyuadzk4w64hog",
					"collection_id":     "descope-collection",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"salesforce": [
						{
							name = "Test salesforce Connector"
							description = "A description for the salesforce connector"
    						base_url = "bceszn6"
    						client_id = "sgetgyvq"
    						client_secret = "tjpxl7uy4wbb"
    						version = "lssphbi"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.salesforce.#": 1,
				"connectors.salesforce.0": map[string]any{
					"id":            testacc.AttributeHasPrefix("CI"),
					"name":          "Test salesforce Connector",
					"description":   "A description for the salesforce connector",
					"base_url":      "bceszn6",
					"client_id":     "sgetgyvq",
					"client_secret": "tjpxl7uy4wbb",
					"version":       "lssphbi",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"salesforce_marketing_cloud": [
						{
							name = "Test salesforce-marketing-cloud Connector"
							description = "A description for the salesforce-marketing-cloud connector"
    						subdomain = "ko54m53in"
    						client_id = "sgetgyvq"
    						client_secret = "tjpxl7uy4wbb"
    						scope = "l4lbz"
    						account_id = "4bpveggea"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.salesforce_marketing_cloud.#": 1,
				"connectors.salesforce_marketing_cloud.0": map[string]any{
					"id":            testacc.AttributeHasPrefix("CI"),
					"name":          "Test salesforce-marketing-cloud Connector",
					"description":   "A description for the salesforce-marketing-cloud connector",
					"subdomain":     "ko54m53in",
					"client_id":     "sgetgyvq",
					"client_secret": "tjpxl7uy4wbb",
					"scope":         "l4lbz",
					"account_id":    "4bpveggea",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"sardine": [
						{
							name = "Test sardine Connector"
							description = "A description for the sardine connector"
    						client_id = "sgetgyvq"
    						client_secret = "tjpxl7uy4wbb"
    						base_url = "bceszn6"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.sardine.#": 1,
				"connectors.sardine.0": map[string]any{
					"id":            testacc.AttributeHasPrefix("CI"),
					"name":          "Test sardine Connector",
					"description":   "A description for the sardine connector",
					"client_id":     "sgetgyvq",
					"client_secret": "tjpxl7uy4wbb",
					"base_url":      "bceszn6",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"segment": [
						{
							name = "Test segment Connector"
							description = "A description for the segment connector"
    						write_key = "vs2jik2d"
    						host = "i5ak"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.segment.#": 1,
				"connectors.segment.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test segment Connector",
					"description": "A description for the segment connector",
					"write_key":   "vs2jik2d",
					"host":        "i5ak",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"sendgrid": [
						{
							name = "Test sendgrid Connector"
							description = "A description for the sendgrid connector"
						}
					]
				}
			`),
			ExpectError: regexp.MustCompile(`Incorrect attribute value type`),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"ses": [
						{
							name = "Test ses Connector"
							description = "A description for the ses connector"
						}
					]
				}
			`),
			ExpectError: regexp.MustCompile(`Incorrect attribute value type`),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"slack": [
						{
							name = "Test slack Connector"
							description = "A description for the slack connector"
    						token = "hrdj5"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.slack.#": 1,
				"connectors.slack.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test slack Connector",
					"description": "A description for the slack connector",
					"token":       "hrdj5",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"smartling": [
						{
							name = "Test smartling Connector"
							description = "A description for the smartling connector"
    						user_identifier = "h2sy3jtqq4rxwi"
    						user_secret = "gchtcl2tno"
    						account_uid = "7qxonan5tu"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.smartling.#": 1,
				"connectors.smartling.0": map[string]any{
					"id":              testacc.AttributeHasPrefix("CI"),
					"name":            "Test smartling Connector",
					"description":     "A description for the smartling connector",
					"user_identifier": "h2sy3jtqq4rxwi",
					"user_secret":     "gchtcl2tno",
					"account_uid":     "7qxonan5tu",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"smtp": [
						{
							name = "Test smtp Connector"
							description = "A description for the smtp connector"
						}
					]
				}
			`),
			ExpectError: regexp.MustCompile(`Incorrect attribute value type`),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"sns": [
						{
							name = "Test sns Connector"
							description = "A description for the sns connector"
						}
					]
				}
			`),
			ExpectError: regexp.MustCompile(`Incorrect attribute value type`),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"sumologic": [
						{
							name = "Test sumologic Connector"
							description = "A description for the sumologic connector"
    						http_source_url = "shhxfygq6qspm"
    						audit_enabled = true
    						audit_filters = [{ key = "actions", operator = "includes", values = ["kekpon4oj34w"] }]
    						troubleshoot_log_enabled = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.sumologic.#": 1,
				"connectors.sumologic.0": map[string]any{
					"id":                       testacc.AttributeHasPrefix("CI"),
					"name":                     "Test sumologic Connector",
					"description":              "A description for the sumologic connector",
					"http_source_url":          "shhxfygq6qspm",
					"audit_enabled":            true,
					"audit_filters.0.values":   []string{"kekpon4oj34w"},
					"troubleshoot_log_enabled": true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"supabase": [
						{
							name = "Test supabase Connector"
							description = "A description for the supabase connector"
    						signing_secret = "7z47p3qqxkpcc"
    						expiration_time = 21
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.supabase.#": 1,
				"connectors.supabase.0": map[string]any{
					"id":              testacc.AttributeHasPrefix("CI"),
					"name":            "Test supabase Connector",
					"description":     "A description for the supabase connector",
					"signing_secret":  "7z47p3qqxkpcc",
					"expiration_time": 21,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"telesign": [
						{
							name = "Test telesign Connector"
							description = "A description for the telesign connector"
    						customer_id = "yn5scsxze2"
    						api_key = "mhvece"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.telesign.#": 1,
				"connectors.telesign.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test telesign Connector",
					"description": "A description for the telesign connector",
					"customer_id": "yn5scsxze2",
					"api_key":     "mhvece",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"traceable": [
						{
							name = "Test traceable Connector"
							description = "A description for the traceable connector"
    						secret_key = "wi4bhwt7a"
    						eu_region = true
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.traceable.#": 1,
				"connectors.traceable.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test traceable Connector",
					"description": "A description for the traceable connector",
					"secret_key":  "wi4bhwt7a",
					"eu_region":   true,
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"turnstile": [
						{
							name = "Test turnstile Connector"
							description = "A description for the turnstile connector"
    						site_key = "ikzbbly"
    						secret_key = "wi4bhwt7a"
						}
					]
				}
			`),
			Check: p.Check(map[string]any{
				"connectors.turnstile.#": 1,
				"connectors.turnstile.0": map[string]any{
					"id":          testacc.AttributeHasPrefix("CI"),
					"name":        "Test turnstile Connector",
					"description": "A description for the turnstile connector",
					"site_key":    "ikzbbly",
					"secret_key":  "wi4bhwt7a",
				},
			}),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"twilio_core": [
						{
							name = "Test twilio-core Connector"
							description = "A description for the twilio-core connector"
						}
					]
				}
			`),
			ExpectError: regexp.MustCompile(`Incorrect attribute value type`),
		},
		resource.TestStep{
			Config: p.Config(`
				connectors = {
					"twilio_verify": [
						{
							name = "Test twilio-verify Connector"
							description = "A description for the twilio-verify connector"
						}
					]
				}
			`),
			ExpectError: regexp.MustCompile(`Incorrect attribute value type`),
		},
		resource.TestStep{
			Config: p.Config(),
			Check: p.Check(map[string]any{
				"connectors.%": 51,
			}),
		},
	)
}
