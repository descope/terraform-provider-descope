// Code generated by terragen. DO NOT EDIT.

package connectors

import (
	"github.com/descope/terraform-provider-descope/internal/models/helpers"
	"github.com/descope/terraform-provider-descope/internal/models/helpers/boolattr"
	"github.com/descope/terraform-provider-descope/internal/models/helpers/objattr"
	"github.com/descope/terraform-provider-descope/internal/models/helpers/stringattr"
	"github.com/descope/terraform-provider-descope/internal/models/helpers/strmapattr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

var HTTPAttributes = map[string]schema.Attribute{
	"id":          stringattr.IdentifierMatched(),
	"name":        stringattr.Required(stringattr.StandardLenValidator),
	"description": stringattr.Default(""),

	"base_url":                   stringattr.Required(),
	"authentication":             objattr.Default(HTTPAuthFieldDefault, HTTPAuthFieldAttributes, HTTPAuthFieldValidator),
	"headers":                    strmapattr.Default(),
	"hmac_secret":                stringattr.SecretOptional(),
	"insecure":                   boolattr.Default(false),
	"include_headers_in_context": boolattr.Default(false),
	"use_static_ips":             boolattr.Default(false),
}

// Model

type HTTPModel struct {
	ID          stringattr.Type `tfsdk:"id"`
	Name        stringattr.Type `tfsdk:"name"`
	Description stringattr.Type `tfsdk:"description"`

	BaseURL                 stringattr.Type                  `tfsdk:"base_url"`
	Authentication          objattr.Type[HTTPAuthFieldModel] `tfsdk:"authentication"`
	Headers                 strmapattr.Type                  `tfsdk:"headers"`
	HMACSecret              stringattr.Type                  `tfsdk:"hmac_secret"`
	Insecure                boolattr.Type                    `tfsdk:"insecure"`
	IncludeHeadersInContext boolattr.Type                    `tfsdk:"include_headers_in_context"`
	UseStaticIPs            boolattr.Type                    `tfsdk:"use_static_ips"`
}

func (m *HTTPModel) Values(h *helpers.Handler) map[string]any {
	data := connectorValues(m.ID, m.Name, m.Description, h)
	data["type"] = "http"
	data["configuration"] = m.ConfigurationValues(h)
	return data
}

func (m *HTTPModel) SetValues(h *helpers.Handler, data map[string]any) {
	setConnectorValues(&m.ID, &m.Name, &m.Description, data, h)
	if c, ok := data["configuration"].(map[string]any); ok {
		m.SetConfigurationValues(c, h)
	}
}

// Configuration

func (m *HTTPModel) ConfigurationValues(h *helpers.Handler) map[string]any {
	c := map[string]any{}
	stringattr.Get(m.BaseURL, c, "baseUrl")
	objattr.Get(m.Authentication, c, "authentication", h)
	getHeaders(m.Headers, c, "headers", h)
	stringattr.Get(m.HMACSecret, c, "hmacSecret")
	boolattr.Get(m.Insecure, c, "insecure")
	boolattr.Get(m.IncludeHeadersInContext, c, "includeHeadersInContext")
	boolattr.Get(m.UseStaticIPs, c, "useStaticIps")
	return c
}

func (m *HTTPModel) SetConfigurationValues(c map[string]any, h *helpers.Handler) {
	stringattr.Set(&m.BaseURL, c, "baseUrl")
	objattr.Set(&m.Authentication, c, "authentication", h)
	setHeaders(&m.Headers, c, "headers", h)
	stringattr.Nil(&m.HMACSecret)
	boolattr.Set(&m.Insecure, c, "insecure")
	boolattr.Set(&m.IncludeHeadersInContext, c, "includeHeadersInContext")
	boolattr.Set(&m.UseStaticIPs, c, "useStaticIps")
}

// Matching

func (m *HTTPModel) GetName() stringattr.Type {
	return m.Name
}

func (m *HTTPModel) GetID() stringattr.Type {
	return m.ID
}

func (m *HTTPModel) SetID(id stringattr.Type) {
	m.ID = id
}
