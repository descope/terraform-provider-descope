// Code generated by terragen. DO NOT EDIT.

package connectors

import (
	"github.com/descope/terraform-provider-descope/internal/models/attrs/boolattr"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/floatattr"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/objattr"
	"github.com/descope/terraform-provider-descope/internal/models/attrs/stringattr"
	"github.com/descope/terraform-provider-descope/internal/models/helpers"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

var RecaptchaEnterpriseValidator = objattr.NewValidator[RecaptchaEnterpriseModel]("must have a valid configuration")

var RecaptchaEnterpriseAttributes = map[string]schema.Attribute{
	"id":          stringattr.IdentifierMatched(),
	"name":        stringattr.Required(stringattr.StandardLenValidator),
	"description": stringattr.Default(""),

	"project_id":          stringattr.Required(),
	"site_key":            stringattr.Required(),
	"api_key":             stringattr.SecretRequired(),
	"base_url":            stringattr.Default(""),
	"override_assessment": boolattr.Default(false),
	"bot_threshold":       floatattr.Default(0.5),
	"assessment_score":    floatattr.Default(0.5),
}

// Model

type RecaptchaEnterpriseModel struct {
	ID          stringattr.Type `tfsdk:"id"`
	Name        stringattr.Type `tfsdk:"name"`
	Description stringattr.Type `tfsdk:"description"`

	ProjectID          stringattr.Type `tfsdk:"project_id"`
	SiteKey            stringattr.Type `tfsdk:"site_key"`
	APIKey             stringattr.Type `tfsdk:"api_key"`
	BaseURL            stringattr.Type `tfsdk:"base_url"`
	OverrideAssessment boolattr.Type   `tfsdk:"override_assessment"`
	BotThreshold       floatattr.Type  `tfsdk:"bot_threshold"`
	AssessmentScore    floatattr.Type  `tfsdk:"assessment_score"`
}

func (m *RecaptchaEnterpriseModel) Values(h *helpers.Handler) map[string]any {
	data := connectorValues(m.ID, m.Name, m.Description, h)
	data["type"] = "recaptcha-enterprise"
	data["configuration"] = m.ConfigurationValues(h)
	return data
}

func (m *RecaptchaEnterpriseModel) SetValues(h *helpers.Handler, data map[string]any) {
	setConnectorValues(&m.ID, &m.Name, &m.Description, data, h)
	if c, ok := data["configuration"].(map[string]any); ok {
		m.SetConfigurationValues(c, h)
	}
}

func (m *RecaptchaEnterpriseModel) Validate(h *helpers.Handler) {
	if !m.AssessmentScore.IsNull() && !m.OverrideAssessment.ValueBool() {
		h.Conflict("The assessment_score field cannot be used unless override_assessment is set to true")
	}
}

// Configuration

func (m *RecaptchaEnterpriseModel) ConfigurationValues(h *helpers.Handler) map[string]any {
	c := map[string]any{}
	stringattr.Get(m.ProjectID, c, "projectId")
	stringattr.Get(m.SiteKey, c, "siteKey")
	stringattr.Get(m.APIKey, c, "apiKey")
	stringattr.Get(m.BaseURL, c, "baseUrl")
	boolattr.Get(m.OverrideAssessment, c, "overrideAssessment")
	floatattr.Get(m.BotThreshold, c, "botThreshold")
	floatattr.Get(m.AssessmentScore, c, "assessmentScore")
	c["enterprise"] = true
	return c
}

func (m *RecaptchaEnterpriseModel) SetConfigurationValues(c map[string]any, h *helpers.Handler) {
	stringattr.Set(&m.ProjectID, c, "projectId")
	stringattr.Set(&m.SiteKey, c, "siteKey")
	stringattr.Nil(&m.APIKey)
	stringattr.Set(&m.BaseURL, c, "baseUrl")
	boolattr.Set(&m.OverrideAssessment, c, "overrideAssessment")
	floatattr.Set(&m.BotThreshold, c, "botThreshold")
	floatattr.Set(&m.AssessmentScore, c, "assessmentScore")
}

// Matching

func (m *RecaptchaEnterpriseModel) GetName() stringattr.Type {
	return m.Name
}

func (m *RecaptchaEnterpriseModel) GetID() stringattr.Type {
	return m.ID
}

func (m *RecaptchaEnterpriseModel) SetID(id stringattr.Type) {
	m.ID = id
}
